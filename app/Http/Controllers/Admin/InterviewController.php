<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Interview;
use App\Models\Applicant;
use Illuminate\Support\Facades\Mail;
use App\Mail\InterviewInvitationMail;

class InterviewController extends Controller
{
    /**
     * Hi·ªÉn th·ªã form g·ª≠i th∆∞ m·ªùi d·ª±a tr√™n danh s√°ch ·ª©ng vi√™n ƒë√£ duy·ªát
     */
    /**
 * Hi·ªÉn th·ªã form g·ª≠i th∆∞ m·ªùi
 */
public function sendInvitationForm()
    {
        $candidates = Applicant::where('status', 'ƒê√£ duy·ªát')->get();
        return view('admin.interviews.invitation', compact('candidates'));
    }
    
    public function sendInvitation(Request $request)
    {
        $request->validate([
            'applicant_id'   => 'required|exists:applicants,id',
            'full_name'      => 'required|string|max:255',
            'email'          => 'required|email',
            'position'       => 'required|string|max:255',
            'interview_time' => 'required|date',
            'note'           => 'nullable|string',
        ]);

        // 1. L∆∞u v√†o b·∫£ng interviews
        $interview = Interview::create([
            'applicant_id'   => $request->applicant_id,
            'full_name'      => $request->full_name,
            'email'          => $request->email,
            'position'       => $request->position,
            'interview_time' => $request->interview_time,
            'note'           => $request->note,
            'status'         => 'ƒê√£ g·ª≠i th∆∞ m·ªùi'
        ]);

        // 2. G·ª≠i email ƒë·∫øn ·ª©ng vi√™n
        try {
            Mail::to($request->email)->send(new InterviewInvitationMail([
                'full_name'      => $request->full_name,
                'email'          => $request->email,
                'position'       => $request->position,
                'interview_time' => $request->interview_time,
                'note'           => $request->note
            ]));
        } catch (\Exception $e) {
            return back()->with('error', '‚ùå G·ª≠i email th·∫•t b·∫°i: ' . $e->getMessage());
        }

        // 3. (T√πy ch·ªçn) C·∫≠p nh·∫≠t tr·∫°ng th√°i ·ª©ng vi√™n
        $applicant = Applicant::find($request->applicant_id);
        if ($applicant && $applicant->status === 'Ch·ªù duy·ªát') {
            $applicant->status = 'ƒê√£ duy·ªát';
            $applicant->save();
        }
        return redirect()->route('admin.interviews.index')->with('success', '‚úÖ ƒê√£ g·ª≠i th∆∞ m·ªùi v√† l∆∞u v√†o h·ªá th·ªëng.');
}


    /**
     * Hi·ªÉn th·ªã danh s√°ch th∆∞ m·ªùi ƒë√£ g·ª≠i
     */
    public function index()
    {
        $invitations = Interview::orderBy('created_at', 'desc')->get();
        return view('admin.interviews.index', compact('invitations'));
    }

    public function show($id)
    {
        $interview = Interview::findOrFail($id);
        return view('admin.interviews.show', compact('interview'));
    }

    public function edit($id)
    {
        $interview = Interview::findOrFail($id);
        return view('admin.interviews.edit', compact('interview'));
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'full_name'      => 'required|string|max:255',
            'email'          => 'required|email',
            'position'       => 'required|string|max:255',
            'interview_time' => 'nullable|date',
            'note'           => 'nullable|string',
        ]);

        $interview = Interview::findOrFail($id);
        $interview->update($request->only(['full_name', 'email', 'position', 'interview_time', 'note']));

        return redirect()->route('admin.interviews.index')->with('success', '‚úÖ ƒê√£ c·∫≠p nh·∫≠t th∆∞ m·ªùi.');
    }

    public function destroy($id)
    {
        Interview::destroy($id);
        return redirect()->route('admin.interviews.index')->with('success', 'üóëÔ∏è ƒê√£ xo√° th∆∞ m·ªùi.');
    }

    /**
     * Hi·ªÉn th·ªã form x√°c nh·∫≠n ph·ªèng v·∫•n
     */
   public function confirmationForm()
    {
        // L·∫•y danh s√°ch ·ª©ng vi√™n t·ª´ b·∫£ng interviews ƒë√£ c√≥ status = 'ƒê√£ g·ª≠i th∆∞ m·ªùi'
        $candidates = Interview::where('status', 'ƒê√£ g·ª≠i th∆∞ m·ªùi')
            ->orderBy('full_name')
            ->get();

        return view('admin.interviews.confirmation', compact('candidates'));
    }


    /**
     * L∆∞u x√°c nh·∫≠n ph·ªèng v·∫•n
     */
    public function submitConfirmation(Request $request)
        {
            $request->validate([
                'full_name'           => 'required|string|max:255',
                'confirmation_status' => 'required|string',
                'note'                => 'nullable|string'
            ]);

            // T√¨m b·∫£n ghi interview g·∫ßn nh·∫•t theo t√™n
            $interview = Interview::where('full_name', $request->full_name)->latest()->first();

            if ($interview) {
                $interview->confirmation_status = $request->confirmation_status;
                $interview->note = $request->note;

                if ($request->confirmation_status === 'ƒê√£ x√°c nh·∫≠n') {
                    $interview->status = 'ƒê√£ x√°c nh·∫≠n';

                    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ·ª©ng vi√™n
                    $applicant = Applicant::where('id', $interview->applicant_id)->first();
                    if ($applicant) {
                        $applicant->status = 'ƒê√£ duy·ªát'; // Ho·∫∑c gi·ªØ nguy√™n n·∫øu c·∫ßn
                        $applicant->confirmation = 'ƒê√£ ƒë·ªìng √Ω'; // üîÅ ƒê√¢y l√† ƒëi·ªÅu ki·ªán hi·ªÉn th·ªã ·ªü accepted
                        $applicant->save();
                    }
                }

                $interview->save();
            }
            return redirect()->route('admin.interviews.index')
                ->with('success', '‚úÖ ƒê√£ x√°c nh·∫≠n ph·ªèng v·∫•n v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i ·ª©ng vi√™n.');
        }


    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i th∆∞ m·ªùi
     */
    public function updateStatus(Request $request, $id)
    {
        $request->validate([
            'status' => 'required|string|max:255',
        ]);

        $interview = Interview::findOrFail($id);
        $interview->status = $request->status;
        $interview->save();

        return redirect()->back()->with('success', '‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng.');
    }
}
